#include <cmrc/cmrc.hpp>
#include <numeric>
#include "head.h"
CMRC_DECLARE(csv_res);
using namespace std;

extern const array<const char8_t*, 40> m_name = {
	u8"Александр",
	u8"Алексей",
	u8"Анатолий",
	u8"Андрей",
	u8"Антон",
	u8"Аркадий",
	u8"Артем",
	u8"Борислав",
	u8"Вадим",
	u8"Валентин",
	u8"Валерий",
	u8"Василий",
	u8"Виктор",
	u8"Виталий",
	u8"Владимир",
	u8"Вячеслав",
	u8"Геннадий",
	u8"Георгий",
	u8"Григорий",
	u8"Даниил",
	u8"Денис",
	u8"Дмитpий",
	u8"Евгений",
	u8"Егор",
	u8"Иван",
	u8"Игорь",
	u8"Илья",
	u8"Кирилл",
	u8"Лев",
	u8"Максим",
	u8"Михаил",
	u8"Никита",
	u8"Николай",
	u8"Олег",
	u8"Семен",
	u8"Сергей",
	u8"Станислав",
	u8"Степан",
	u8"Федор",
	u8"Юрий"
};
extern const array<const char8_t*, 44> f_name = {
	u8"Александра",
	u8"Алина",
	u8"Алла",
	u8"Анастасия",
	u8"Анжела",
	u8"Анна",
	u8"Антонина",
	u8"Валентина",
	u8"Валерия",
	u8"Вероника",
	u8"Виктория",
	u8"Галина",
	u8"Дарья",
	u8"Евгения",
	u8"Екатерина",
	u8"Елена",
	u8"Елизавета",
	u8"Карина",
	u8"Кира",
	u8"Клавдия",
	u8"Кристина",
	u8"Ксения",
	u8"Лидия",
	u8"Любовь",
	u8"Людмила",
	u8"Маргарита",
	u8"Марина",
	u8"Мария",
	u8"Надежда",
	u8"Наталья",
	u8"Нина",
	u8"Оксана",
	u8"Олеся",
	u8"Ольга",
	u8"Полина",
	u8"Светлана",
	u8"Таисия",
	u8"Тамара",
	u8"Татьяна",
	u8"Эвелина",
	u8"Эльвира",
	u8"Юлиана",
	u8"Юлия",
	u8"Яна"
};
extern const array<const char8_t*, 250> surname = {
	u8"Смирнов",
	u8"Иванов",
	u8"Кузнецов",
	u8"Соколов",
	u8"Попов",
	u8"Лебедев",
	u8"Козлов",
	u8"Новиков",
	u8"Морозов",
	u8"Петров",
	u8"Волков",
	u8"Соловьёв",
	u8"Васильев",
	u8"Зайцев",
	u8"Павлов",
	u8"Семёнов",
	u8"Голубев",
	u8"Виноградов",
	u8"Богданов",
	u8"Воробьёв",
	u8"Фёдоров",
	u8"Михайлов",
	u8"Беляев",
	u8"Тарасов",
	u8"Белов",
	u8"Комаров",
	u8"Орлов",
	u8"Киселёв",
	u8"Макаров",
	u8"Андреев",
	u8"Ковалёв",
	u8"Ильин",
	u8"Гусев",
	u8"Титов",
	u8"Кузьмин",
	u8"Кудрявцев",
	u8"Баранов",
	u8"Куликов",
	u8"Алексеев",
	u8"Степанов",
	u8"Яковлев",
	u8"Сорокин",
	u8"Сергеев",
	u8"Романов",
	u8"Захаров",
	u8"Борисов",
	u8"Королёв",
	u8"Герасимов",
	u8"Пономарёв",
	u8"Григорьев",
	u8"Лазарев",
	u8"Медведев",
	u8"Ершов",
	u8"Никитин",
	u8"Соболев",
	u8"Рябов",
	u8"Поляков",
	u8"Цветков",
	u8"Данилов",
	u8"Жуков",
	u8"Фролов",
	u8"Журавлёв",
	u8"Николаев",
	u8"Крылов",
	u8"Максимов",
	u8"Сидоров",
	u8"Осипов",
	u8"Белоусов",
	u8"Федотов",
	u8"Дорофеев",
	u8"Егоров",
	u8"Матвеев",
	u8"Бобров",
	u8"Дмитриев",
	u8"Калинин",
	u8"Анисимов",
	u8"Петухов",
	u8"Антонов",
	u8"Тимофеев",
	u8"Никифоров",
	u8"Веселов",
	u8"Филиппов",
	u8"Марков",
	u8"Большаков",
	u8"Суханов",
	u8"Миронов",
	u8"Ширяев",
	u8"Александров",
	u8"Коновалов",
	u8"Шестаков",
	u8"Казаков",
	u8"Ефимов",
	u8"Денисов",
	u8"Громов",
	u8"Фомин",
	u8"Давыдов",
	u8"Мельников",
	u8"Щербаков",
	u8"Блинов",
	u8"Колесников",
	u8"Карпов",
	u8"Афанасьев",
	u8"Власов",
	u8"Маслов",
	u8"Исаков",
	u8"Тихонов",
	u8"Аксёнов",
	u8"Гаврилов",
	u8"Родионов",
	u8"Котов",
	u8"Горбунов",
	u8"Кудряшов",
	u8"Быков",
	u8"Зуев",
	u8"Третьяков",
	u8"Савельев",
	u8"Панов",
	u8"Рыбаков",
	u8"Суворов",
	u8"Абрамов",
	u8"Воронов",
	u8"Мухин",
	u8"Архипов",
	u8"Трофимов",
	u8"Мартынов",
	u8"Емельянов",
	u8"Горшков",
	u8"Чернов",
	u8"Овчинников",
	u8"Селезнёв",
	u8"Панфилов",
	u8"Копылов",
	u8"Михеев",
	u8"Галкин",
	u8"Назаров",
	u8"Лобанов",
	u8"Лукин",
	u8"Беляков",
	u8"Потапов",
	u8"Некрасов",
	u8"Хохлов",
	u8"Жданов",
	u8"Наумов",
	u8"Шилов",
	u8"Воронцов",
	u8"Ермаков",
	u8"Дроздов",
	u8"Игнатьев",
	u8"Савин",
	u8"Логинов",
	u8"Сафонов",
	u8"Капустин",
	u8"Кириллов",
	u8"Моисеев",
	u8"Елисеев",
	u8"Кошелев",
	u8"Костин",
	u8"Горбачёв",
	u8"Орехов",
	u8"Ефремов",
	u8"Исаев",
	u8"Евдокимов",
	u8"Калашников",
	u8"Кабанов",
	u8"Носков",
	u8"Юдин",
	u8"Кулагин",
	u8"Лапин",
	u8"Прохоров",
	u8"Нестеров",
	u8"Харитонов",
	u8"Агафонов",
	u8"Муравьёв",
	u8"Ларионов",
	u8"Федосеев",
	u8"Зимин",
	u8"Пахомов",
	u8"Шубин",
	u8"Игнатов",
	u8"Филатов",
	u8"Крюков",
	u8"Рогов",
	u8"Кулаков",
	u8"Терентьев",
	u8"Молчанов",
	u8"Владимиров",
	u8"Артемьев",
	u8"Гурьев",
	u8"Зиновьев",
	u8"Гришин",
	u8"Кононов",
	u8"Дементьев",
	u8"Ситников",
	u8"Симонов",
	u8"Мишин",
	u8"Фадеев",
	u8"Комиссаров",
	u8"Мамонтов",
	u8"Носов",
	u8"Гуляев",
	u8"Шаров",
	u8"Устинов",
	u8"Вишняков",
	u8"Евсеев",
	u8"Лаврентьев",
	u8"Брагин",
	u8"Константинов",
	u8"Корнилов",
	u8"Авдеев",
	u8"Зыков",
	u8"Бирюков",
	u8"Шарапов",
	u8"Никонов",
	u8"Щукин",
	u8"Дьячков",
	u8"Одинцов",
	u8"Сазонов",
	u8"Якушев",
	u8"Красильников",
	u8"Гордеев",
	u8"Самойлов",
	u8"Князев",
	u8"Беспалов",
	u8"Уваров",
	u8"Шашков",
	u8"Бобылёв",
	u8"Доронин",
	u8"Белозёров",
	u8"Рожков",
	u8"Самсонов",
	u8"Мясников",
	u8"Лихачёв",
	u8"Буров",
	u8"Сысоев",
	u8"Фомичёв",
	u8"Русаков",
	u8"Стрелков",
	u8"Гущин",
	u8"Тетерин",
	u8"Колобов",
	u8"Субботин",
	u8"Фокин",
	u8"Блохин",
	u8"Селиверстов",
	u8"Пестов",
	u8"Кондратьев",
	u8"Силин",
	u8"Меркушев",
	u8"Лыткин",
	u8"Туров"
};
extern const array<const char8_t*, 73> lastname = {
	u8"Александрович",
	u8"Алексеевич",
	u8"Анатольевич",
	u8"Андреевич",
	u8"Антонович",
	u8"Аркадьевич",
	u8"Арсеньевич",
	u8"Артемович",
	u8"Афанасьевич",
	u8"Богданович",
	u8"Борисович",
	u8"Вадимович",
	u8"Валентинович",
	u8"Валериевич",
	u8"Васильевич",
	u8"Викторович",
	u8"Витальевич",
	u8"Владимирович",
	u8"Всеволодович",
	u8"Вячеславович",
	u8"Гаврилович",
	u8"Геннадиевич",
	u8"Георгиевич",
	u8"Глебович",
	u8"Григорьевич",
	u8"Давыдович",
	u8"Данилович",
	u8"Денисович",
	u8"Дмитриевич",
	u8"Евгеньевич",
	u8"Егорович",
	u8"Емельянович",
	u8"Ефимович",
	u8"Иванович",
	u8"Игоревич",
	u8"Ильич",
	u8"Иосифович",
	u8"Кириллович",
	u8"Константинович",
	u8"Корнеевич",
	u8"Леонидович",
	u8"Львович",
	u8"Макарович",
	u8"Максимович",
	u8"Маркович",
	u8"Матвеевич",
	u8"Митрофанович",
	u8"Михайлович",
	u8"Назарович",
	u8"Наумович",
	u8"Николаевич",
	u8"Олегович",
	u8"Павлович",
	u8"Петрович",
	u8"Платонович",
	u8"Робертович",
	u8"Родионович",
	u8"Романович",
	u8"Савельевич",
	u8"Семенович",
	u8"Сергеевич",
	u8"Станиславович",
	u8"Степанович",
	u8"Тарасович",
	u8"Тимофеевич",
	u8"Тихонович",
	u8"Федорович",
	u8"Феликсович",
	u8"Филиппович",
	u8"Эдуардович",
	u8"Юрьевич",
	u8"Яковлевич",
	u8"Ярославович"
};
extern const array<mobile_range_s, 131> mob_range {
    mobile_range_s(0,0),
	mobile_range_s(9291000000,200000),
	mobile_range_s(9210900000,300000),
	mobile_range_s(9211110000,310000),
	mobile_range_s(9211800000,410000),
	mobile_range_s(9213000000,1910000),
	mobile_range_s(9215500000,2410000),
	mobile_range_s(9991853000,2445000),
	mobile_range_s(9991953000,2482000),
	mobile_range_s(9315770000,2682000),
	mobile_range_s(9319800000,2882000),
	mobile_range_s(9319600000,3082000),
	mobile_range_s(9991220000,3092000),
	mobile_range_s(9991350000,3102000),
	mobile_range_s(9991460000,3142000),
	mobile_range_s(9991503000,3187000),
	mobile_range_s(9991590000,3217000),
	mobile_range_s(9991803000,3252000),
	mobile_range_s(9990603000,3349000),
	mobile_range_s(9990810000,3359000),
	mobile_range_s(9990903000,3406000),
	mobile_range_s(9991010000,3446000),
	mobile_range_s(9991065000,3471000),
	mobile_range_s(9991160000,3511000),
	mobile_range_s(9310000000,3601000),
	mobile_range_s(9990045000,3656000),
	mobile_range_s(9990203000,3753000),
	mobile_range_s(9990303000,3850000),
	mobile_range_s(9990410000,3990000),
	mobile_range_s(9990560000,4000000),
	mobile_range_s(9313200000,4050000),
	mobile_range_s(9313250000,4150000),
	mobile_range_s(9313350000,4390000),
	mobile_range_s(9315760000,4400000),
	mobile_range_s(9313590000,4650000),
	mobile_range_s(9315300000,4790000),
	mobile_range_s(9216300000,5090000),
	mobile_range_s(9217400000,5690000),
	mobile_range_s(9218450000,5740000),
	mobile_range_s(9218550000,7190000),
	mobile_range_s(9312000000,7690000),
	mobile_range_s(9312500000,8390000),
	mobile_range_s(0,0),
	mobile_range_s(9019700000,100000),
	mobile_range_s(9013000000,501000),
	mobile_range_s(9013700000,601000),
	mobile_range_s(0,0),
	mobile_range_s(9062400000,400000),
	mobile_range_s(9095770000,570000),
	mobile_range_s(9602300000,1170000),
	mobile_range_s(9626800000,1670000),
	mobile_range_s(9632410000,1760000),
	mobile_range_s(9030920000,1840000),
	mobile_range_s(9681950000,1860000),
	mobile_range_s(9697000000,2260000),
	mobile_range_s(9697900000,2360000),
	mobile_range_s(9657470000,2390000),
	mobile_range_s(9623430000,2430000),
	mobile_range_s(9623820000,2460000),
	mobile_range_s(9674320000,2490000),
	mobile_range_s(9679670000,2520000),
	mobile_range_s(9679730000,2590000),
	mobile_range_s(9623530000,2610000),
	mobile_range_s(9675900000,2710000),
	mobile_range_s(9676250000,2720000),
	mobile_range_s(9675200000,2760000),
	mobile_range_s(9658130000,2800000),
	mobile_range_s(9658180000,2820000),
	mobile_range_s(9675600000,2870000),
	mobile_range_s(9675700000,2920000),
	mobile_range_s(9673570000,2950000),
	mobile_range_s(9616070000,3010000),
	mobile_range_s(9646100000,3060000),
	mobile_range_s(9667500000,3160000),
	mobile_range_s(9675300000,3260000),
	mobile_range_s(9681800000,3410000),
	mobile_range_s(9673400000,3460000),
	mobile_range_s(9673460000,3500000),
	mobile_range_s(9675100000,3550000),
	mobile_range_s(9675500000,3590000),
	mobile_range_s(9643200000,3790000),
	mobile_range_s(9643400000,3890000),
	mobile_range_s(9643600000,4290000),
	mobile_range_s(9650000000,5290000),
	mobile_range_s(9633000000,5510000),
	mobile_range_s(9657500000,6010000),
	mobile_range_s(9052000000,6380000),
	mobile_range_s(9052500000,6780000),
	mobile_range_s(9062250000,6830000),
	mobile_range_s(9618000000,6950000),
	mobile_range_s(9633220000,7030000),
	mobile_range_s(9633400000,7130000),
	mobile_range_s(0,0),
	mobile_range_s(9043300000,100000),
	mobile_range_s(9045500000,200000),
	mobile_range_s(9046000000,400000),
	mobile_range_s(9046300000,600000),
	mobile_range_s(9500000000,1000000),
	mobile_range_s(9516600000,1300000),
	mobile_range_s(9520950000,1350000),
	mobile_range_s(9526650000,1400000),
	mobile_range_s(9006200000,1800000),
	mobile_range_s(9523800000,2000000),
	mobile_range_s(9522000000,2300000),
	mobile_range_s(9533600000,2500000),
	mobile_range_s(9531400000,2900000),
	mobile_range_s(9502200000,3000000),
	mobile_range_s(9522600000,3300000),
	mobile_range_s(9533400000,3500000),
	mobile_range_s(9522300000,3700000),
	mobile_range_s(9523500000,4000000),
	mobile_range_s(9045100000,4100000),
	mobile_range_s(9500400000,4200000),
	mobile_range_s(9516400000,4400000),
	mobile_range_s(0,0),
	mobile_range_s(9110000000,400000),
	mobile_range_s(9110800000,2600000),
	mobile_range_s(9117000000,3600000),
	mobile_range_s(9118100000,4000000),
	mobile_range_s(9119000000,5000000),
	mobile_range_s(9817000000,5500000),
	mobile_range_s(9819000000,6000000),
	mobile_range_s(9811000000,7000000),
	mobile_range_s(9819500000,7500000),
	mobile_range_s(9812000000,7800000),
	mobile_range_s(9817500000,8300000),
	mobile_range_s(9818000000,8500000),
	mobile_range_s(9818200000,8800000),
	mobile_range_s(9818500000,8950000),
	mobile_range_s(9816800000,9150000),
	mobile_range_s(9818700000,9450000)
};
extern const array<operator_s, 5> mob_operator {
    operator_s(&mob_range[1],	&mob_range[42],	8390000,	8390),
    operator_s(&mob_range[43],	&mob_range[46],	601000,		601),
    operator_s(&mob_range[47],	&mob_range[92],	7130000,	7130),
    operator_s(&mob_range[93],	&mob_range[114],4400000,	4400),
    operator_s(&mob_range[115],	&mob_range[131],9450000,	9450)
};
extern const array<job1s, 1> job1 = {
    job1s(u8"Генеральный директор",	80540,	1)
};
extern const array<job2s, 10> job2 = {
    job2s(u8"Начальник",			83947,	10),
    job2s(u8"Охранник",				37244 ,	6),
    job2s(u8"Уборщик",				27497,	6),
    job2s(u8"Комендант",			39687,	6),
    job2s(u8"Бухгалтер",			55572,	5),
    job2s(u8"Менеджер",				60701,	25),
    job2s(u8"Программист",			109790,	12),
    job2s(u8"Инженер",				69067,	12),
    job2s(u8"Медик",				64401,	12),
    job2s(u8"Секретарь",			40282,	5)
};
array<const char*, 25221> address;

namespace database {
	const unsigned mob_operator_range = accumulate(
		&mob_operator[0],
		&mob_operator[mob_operator.size()],
		0u,
		[](unsigned sum, const operator_s& mo) { return sum + mo.probability; });
	const unsigned job_range = accumulate(
		&job2[0],
		&job2[job2.size()],
		0u,
		[](unsigned sum, const job2s& j) { return sum + j.proportion; });
}

void init_database() {
	auto fs = cmrc::csv_res::get_filesystem();

	auto ptr = fs.open("address.csv").begin();
    for (auto& dst : address) {
        dst = ptr;
        ptr = strchr(ptr, 0) + 1;
    }
}